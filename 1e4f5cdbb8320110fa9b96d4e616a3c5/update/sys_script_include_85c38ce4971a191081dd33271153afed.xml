<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>sn_niem.AssessmentHelper</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>AssessmentHelper</name>
        <script><![CDATA[var AssessmentHelper = Class.create();
AssessmentHelper.prototype = {
    initialize: function() {},

    /**
     * Function called from a BR to create an assessment upon creation of a case.
     *
     * Ex: createAssessment ( caseGr, "Operation Risk Assessment") 
     */
    createAssessment: function(caseSysId, assessmentName) {
        // first, check if we already have one for the current case
        var assessmentGr = new GlideRecord('sn_niem_assessment');
        assessmentGr.addQuery('case', caseSysId);
        assessmentGr.addQuery('name', assessmentName);
        assessmentGr.query();
        var assesmentExists = assessmentGr.hasNext();
        //gs.addInfoMessage("AssessmentHelper: assesment with name '" + assessmentName + "' Exists: " + assesmentExists);
        // if not, create a new assessment
        if (!assesmentExists) {
            assessmentGr.initialize();
            assessmentGr.setValue('case', caseSysId);
            assessmentGr.setValue('name', assessmentName);
            var recResponse = assessmentGr.insert();
            gs.addInfoMessage("AssessmentHelper: recResponse '" + recResponse);

            //gs.log("AssessmentHelper: createAssessment '" + assessmentName + "' ");
            //gs.log("AssessmentHelper: recResponse '" + recResponse + "' ");

            // the creation of questions-responses are handled by a BR on the Assessment
        }
    },

    handleResponse: function(recResponse, sys_id_of_the_created_record) {
        // Answer will be the sys_id_of_the_created_record or null
        if (sys_id_of_the_created_record) {
            gs.addInfoMessage("AssessmentHelper: Created Assesment with SysId '" + sys_id_of_the_created_record + "' ");
        } else {
            gs.addErrorMessage("AssessmentHelper: Failed to create the assesment");
        }
    },


    getAssessmentDefinitionId: function(assessment_name) {
        //gs.addInfoMessage("AssessmentHelper: getAssessmentDefinition for: " + assessment_name);
        var assessmentDefGr = new GlideRecord('sn_niem_assessment_definition');
        assessmentDefGr.addQuery('name', assessment_name);
        assessmentDefGr.query();
        assessmentDefGr.next();
        return assessmentDefGr.sys_id;
    },



    createQtnRespFromAssessmentDefinition: function(assessment_id, assessment_name) {
        //gs.addInfoMessage("AssessmentHelper: assessment_definition: " + assessment_name );
        var assessment_definition_id = this.getAssessmentDefinitionId(assessment_name);
        if (!assessment_definition_id) {
            gs.addErrorMessage("Missing Assessment Definition for: " + assessment_name);
        }
        // Get All Questions associated with this Assessment definition
        var questionsGr = new GlideRecord('sn_niem_assessment_question');
        questionsGr.addQuery('assessment_definition', assessment_definition_id);
        questionsGr.orderBy('category');
        questionsGr.orderBy('order');
        questionsGr.query();
        while (questionsGr.next()) {
            var category = questionsGr.getValue('category');
            var text = questionsGr.getValue('text');
            var points = questionsGr.getValue('points');
            var questions_SysId = questionsGr.getValue('sys_id');

            // Create Question Responses and associate them with the Assessment
            var qtn_respGr = new GlideRecord('sn_niem_assessment_qtn_resp');
            qtn_respGr.initialize();
            qtn_respGr.setValue('assessment', assessment_id);
            qtn_respGr.setValue('question', questions_SysId);
            qtn_respGr.insert();
        }
    },

    /**
	 * Returns the list of quesion_response for a given Case and Assessment name
	 * 
	    var caseSysId = "caee3601470e551024e32782846d436c";
        var assessmentName = 'Operation Risk Assessment';

        var helper = new sn_niem.AssessmentHelper();
        var questionListByCategory = helper.getQuestionResponsesForAssessment(caseSysId, assessmentName)

        gs.info(JSON.stringify(questionListByCategory))
	 * 
	 */
    getQuestionResponsesForAssessment: function(caseSysId, assessmentName) {
        var assessmentGr = new GlideRecord('sn_niem_assessment');
        assessmentGr.addQuery('case', caseSysId);
        assessmentGr.addQuery('name', assessmentName);
        assessmentGr.query();
        if (assessmentGr.hasNext) {
            assessmentGr.next();
            var assessment_id = assessmentGr.getValue('sys_id');

            // Get the assessment responses
            var qtn_resp = new GlideRecord('sn_niem_assessment_qtn_resp');
            qtn_resp.addQuery('assessment', assessment_id);
            qtn_resp.orderBy('question.category');
            qtn_resp.orderBy('question.order');
            qtn_resp.query();

            var questionListByCategory = [];
            var currentCategory = '';
            var categoryObject;

            while (qtn_resp.next()) {
				var sys_id = qtn_resp.getValue('sys_id');
                var category = qtn_resp.question.category + "";
                var questionText = qtn_resp.question.text + "";
                var order = parseInt(qtn_resp.question.order, 10);
                var points = parseInt(qtn_resp.question.points, 10);

                var newCategory = !category.equals(currentCategory);
                if (newCategory) {
                    //gs.info(" ✅ New Category:  " + category);
                    categoryObject = {};
                    categoryObject.category = category;
                    categoryObject.questionList = [];
                    questionListByCategory.push(categoryObject);
                    currentCategory = category;
                }
                //gs.info("  ⮕ " + questionText);

                var question = {
					"sys_id" : sys_id,
                    "text": questionText,
                    "order": order,
                    "points": points
                };
                categoryObject.questionList.push(question);
            }
            //gs.info(JSON.stringify(questionListByCategory))
            return questionListByCategory;
        }
    },

    type: 'AssessmentHelper'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>marc.mouries</sys_created_by>
        <sys_created_on>2022-09-29 01:49:49</sys_created_on>
        <sys_id>85c38ce4971a191081dd33271153afed</sys_id>
        <sys_name>AssessmentHelper</sys_name>
        <sys_package display_value="NIEM" source="sn_niem">1e4f5cdbb8320110fa9b96d4e616a3c5</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NIEM">1e4f5cdbb8320110fa9b96d4e616a3c5</sys_scope>
        <sys_update_name>sys_script_include_85c38ce4971a191081dd33271153afed</sys_update_name>
    </sys_script_include>
</record_update>
