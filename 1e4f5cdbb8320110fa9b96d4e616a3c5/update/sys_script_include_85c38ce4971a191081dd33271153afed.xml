<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>sn_niem.AssessmentHelper</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>AssessmentHelper</name>
        <script><![CDATA[var AssessmentHelper = Class.create();
AssessmentHelper.prototype = {

    /* Table for storing individual assessments */
    ASSESSMENT_TABLE: 'sn_niem_assessment',

    /* Table for storing assessment templates definitions */
    ASSESSMENT_DEFINITION_TABLE: 'sn_niem_assessment_definition',

    /* Table for storing questions within assessment templates */
    ASSESSMENT_QUESTION_TABLE: 'sn_niem_assessment_question',

    /* Table for storing choice options for questions in assessment templates */
    ASSESSMENT_TEMPLATE_CHOICES_TABLE: 'sn_niem_assessment_template_choices',

    /* Table for storing responses to assessment questions */
    ASSESSMENT_RESPONSE_TABLE: 'sn_niem_assessment_qtn_resp',

    initialize: function() {},

    type: 'AssessmentHelper',

    /**
     * Function called from a BR to create an assessment upon creation of a case.
     *
     * Ex: createAssessment ( caseGr, "Operation Risk Assessment") 
     */
    createAssessment: function(caseSysId, assessmentName) {
        // first, check if we already have one for the current case
        var assessmentGr = new GlideRecord(this.ASSESSMENT_TABLE);
        assessmentGr.addQuery('case', caseSysId);
        assessmentGr.addQuery('name', assessmentName);
        assessmentGr.query();
        var assesmentExists = assessmentGr.hasNext();
        gs.warn("NIEM: AssessmentHelper: assesment with name '" + assessmentName + "' exists: " + assesmentExists);

        // if not, create a new assessment
        if (!assesmentExists) {
            var assessmentTemplateId = this.getAssessmentTemplateId(assessmentName);
            gs.warn("NIEM: AssessmentHelper: AssessmentTemplateId for '" + assessmentName + "' = " + assessmentTemplateId);
            if (!assessmentTemplateId) {
                gs.warn("NIEM: AssessmentHelper: AssessmentTemplate not found '" + assessmentName + "' = " + assessmentTemplateId);
            }

            assessmentGr.initialize();
            assessmentGr.setValue('case', caseSysId);
            assessmentGr.setValue('name', assessmentName);
            assessmentGr.setValue('template', assessmentTemplateId);
            var assessmentSysId = assessmentGr.insert();
            gs.warn("AssessmentHelper: created Assessment '" + assessmentName + "' " + assessmentSysId);

            // assign assessment to the case
            var case_recordGR = new GlideRecord("sn_icms_operation_plan");
            case_recordGR.get(caseSysId);
            case_recordGR.setValue('risk_assessment', assessmentSysId);
            var update_result = case_recordGR.update();
            gs.warn("AssessmentHelper: assigned Assessment '" + assessmentSysId + "' to operation: " + caseSysId + " update_result = " + update_result);
            // the creation of questions-responses are handled by a BR on the Assessment
        }
    },

    handleResponse: function(recResponse, sys_id_of_the_created_record) {
        // Answer will be the sys_id_of_the_created_record or null
        if (sys_id_of_the_created_record) {
            gs.warn("AssessmentHelper: Created Assesment with SysId '" + sys_id_of_the_created_record + "' ");
        } else {
            gs.warn("AssessmentHelper: Failed to create the assesment");
        }
    },


    getAssessmentTemplateId: function(assessment_name) {
        gs.warn("AssessmentHelper: getAssessmentDefinition for: " + assessment_name);
        var assessmentDefGr = new GlideRecord(this.ASSESSMENT_DEFINITION_TABLE);
        assessmentDefGr.addQuery('name', assessment_name);
        assessmentDefGr.query();
        assessmentDefGr.next();
        return assessmentDefGr.sys_id;
    },

    //KF - 1-Dec-23 - updated version for NSF demo parametertizing
    createQtnRespFromAssessmentDefinition: function(question_source, resp_target, assessment_id, assessment_template_id) {
        gs.warn("AssessmentHelper: assessment_definition: " + assessment_id);
        // Get All Questions associated with this Assessment definition
        var questionsGr = new GlideRecord(question_source);
        questionsGr.addQuery('assessment_template', assessment_template_id);
        questionsGr.orderBy('category');
        questionsGr.orderBy('order');
        questionsGr.query();
        while (questionsGr.next()) {
            var category = questionsGr.getValue('category');
            var text = questionsGr.getValue('text');
            var points = questionsGr.getValue('points');
            var questions_SysId = questionsGr.getValue('sys_id');

            // Create Question Responses and associate them with the Assessment
            var qtn_respGr = new GlideRecord(resp_target);
            qtn_respGr.initialize();
            qtn_respGr.setValue('assessment', assessment_id);
            qtn_respGr.setValue('question', questions_SysId);
            qtn_respGr.insert();
        }
    },

    // KF : Dec  4, 2023: refactoring for NSF
    // MM : Feb 15, 2024: update to fetch questions and responses from the NIEM model instead of passing the extended tables
    getAssessmentQuestionResponsesForCase: function(caseSysId) {
        gs.warn("NIEM: AssessmentHelper: getAssessmentQuestionResponsesForCase");
        gs.warn("- case id  = " + caseSysId);

        // Look up the assessment from the case record 
        var assessmentGr = new GlideRecord(this.ASSESSMENT_TABLE);
        assessmentGr.addQuery('case', caseSysId);
        assessmentGr.query();
        if (!assessmentGr.next()) {
            gs.info("NIEM: error: no assessment found for case: " + caseSysId);
            return {
                status: "error",
                message: "No assessment found for case: " + caseSysId
            };
        }
        var assessment_id = assessmentGr.getValue('sys_id');
        gs.warn("- assmt id = " + assessment_id);
        var assessment_summary = assessmentGr.getValue('summary');
        var score = assessmentGr.getValue('score');

        // Get the assessment responses
        var qtn_resp = new GlideRecord(this.ASSESSMENT_RESPONSE_TABLE);
        qtn_resp.addQuery('assessment', assessment_id);
        qtn_resp.orderBy('question.category');
        qtn_resp.orderBy('question.order');
        qtn_resp.query();
        var questionListByCategory = [];
        var currentCategory = '';
        var categoryObject;

        while (qtn_resp.next()) {
            var sys_id = qtn_resp.getValue('sys_id');
            var category = qtn_resp.question.category + "";
            var type = qtn_resp.question.type + "";
            var questionText = qtn_resp.question.text + "";
            var order = parseInt(qtn_resp.question.order, 10);
            var points = parseInt(qtn_resp.question.points, 10);
            var question_id = qtn_resp.question;
            var qtn_response = qtn_resp.response + "";
            var qtn_value = qtn_resp.value + "";

            var newCategory = !category.equals(currentCategory);
            if (newCategory) {
                categoryObject = {};
                categoryObject.category = category;
                categoryObject.questionList = [];
                categoryObject.summary = assessment_summary;
                categoryObject.summary_id = assessment_id;
                categoryObject.score = score;
                questionListByCategory.push(categoryObject);
                currentCategory = category;
            }

            // QUESTION TYPE
            gs.info("NIEM: question Type : : " + type);
            gs.info("NIEM: question Text : : " + questionText);
            var responseOptions = [];
            if (type == "yes_no") {
                responseOptions = [{"id":"yes","label":"Yes"},{"id":"no","label":"No"}];
            } else {
                responseOptions = this._fetchChoicesFromTemplate(question_id);
            }

            var question = {
                "sys_id": sys_id,
                "type": type,
                "questionText": questionText,
                "response": qtn_response,
                "value": qtn_value,
                "order": order,
                "points": points,
                "responseOptions": responseOptions
            };
            categoryObject.questionList.push(question);

        }
        //gs.info(JSON.stringify(questionListByCategory))
        return questionListByCategory;
    },


    /* Fetch questions along with their predefined choices from the sn_niem_assessment_template_choices table */
    _fetchChoicesFromTemplate: function(questionSysId) {
        var choiceList = [];
        var grAssessmentChoices = new GlideRecord(this.ASSESSMENT_TEMPLATE_CHOICES_TABLE);
        grAssessmentChoices.addQuery('assessment_template_question', questionSysId);
        grAssessmentChoices.orderBy('value');
        grAssessmentChoices.query();

        while (grAssessmentChoices.next()) {
            choiceList.push({
                id: grAssessmentChoices.sys_id.toString(),
                label: grAssessmentChoices.label.toString(),
                sublabel: grAssessmentChoices.annotation.toString(),
                value: grAssessmentChoices.value.toString()
            });
        }

        return choiceList;
    },


    /**
     * Increase or decrease the number of responses when a response is provided
     * Used in the business rule: Update Assessment Response Count
     */
    increaseNumberOfResponses: function(assessment_sysId) {
        this._increment(this.ASSESSMENT_TABLE, assessment_sysId, 'number_of_responses', +1);
    },

    decreaseNumberOfResponses: function(assessment_sysId) {
        this._increment(this.ASSESSMENT_TABLE, assessment_sysId, 'number_of_responses', -1);
    },


    _increment: function(tableName, record_sysId, fieldName, increment) {
        var recordGR = new GlideRecord(tableName);
        recordGR.get(record_sysId);
        var current_value = parseInt(recordGR.getValue(fieldName), 10);
        recordGR.setValue(fieldName, current_value + increment);
        recordGR.update();
    }
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>marc.mouries</sys_created_by>
        <sys_created_on>2022-09-29 01:49:49</sys_created_on>
        <sys_id>85c38ce4971a191081dd33271153afed</sys_id>
        <sys_mod_count>61</sys_mod_count>
        <sys_name>AssessmentHelper</sys_name>
        <sys_package display_value="NIEM" source="sn_niem">1e4f5cdbb8320110fa9b96d4e616a3c5</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NIEM">1e4f5cdbb8320110fa9b96d4e616a3c5</sys_scope>
        <sys_update_name>sys_script_include_85c38ce4971a191081dd33271153afed</sys_update_name>
        <sys_updated_by>Marc.Mouries</sys_updated_by>
        <sys_updated_on>2024-02-16 21:29:38</sys_updated_on>
    </sys_script_include>
</record_update>
